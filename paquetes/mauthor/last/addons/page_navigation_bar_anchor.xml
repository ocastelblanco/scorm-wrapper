<?xml version='1.0' encoding='UTF-8' ?><addon id='page_navigation_bar_anchor'><metadata></metadata><model><property name='speechTextsGoToPageNumber' displayName='Speech Go to page' type='string' isLocalized='true' isDefault='false'/><property name='speechTextsNextPage' displayName='Speech Next page' type='string' isLocalized='true' isDefault='false'/><property name='speechTextsPrevPage' displayName='Speech Prev. page' type='string' isLocalized='true' isDefault='false'/><property name='speechTextsTitled' displayName='Speech titled' type='string' isLocalized='true' isDefault='false'/><property name='speechTextsDisabledPage' displayName='Speech Disabled page' type='string' isLocalized='true' isDefault='false'/><property name='playTitle' displayName='' type='boolean' isLocalized='false' isDefault='false'/></model><resources></resources><css>.navigationbar-wrapper {
    direction: inherit;
}

.navigationbar-wrapper * {
    direction: inherit;
}

.navigationbar-wrapper a {
    text-decoration: none !important;
}

.navigationbar-wrapper a span {
    display: block;
    float: left;
    text-align: center;
    white-space: nowrap;
    text-decoration: none;
    height: auto;
    font: 1.5em &quot;Lucida Grande&quot;, Geneva, Verdana, Arial, Helvetica, sans-serif;
    width: 40px;
}

.navigationbar-element,
.navigationbar-element-first,
.navigationbar-element-next,
.navigationbar-element-previous,
.navigationbar-element-last {
    color: #7F7F7F;
    background-color: #F3F3F3;
}

.navigationbar-element-current {
    background-color: #2091AB;
    color: white;
}

.navigationbar-element-mouse-hover,
.navigationbar-element-first-mouse-hover,
.navigationbar-element-next-mouse-hover,
.navigationbar-element-previous-mouse-hover,
.navigationbar-element-last-mouse-hover {
    background-color: #7F7F7F;
    color: #F3F3F3;
}

.navigationbar-element-current-mouse-hover {
    background-color: #17697B;
}

.navigationbar-element-first-inactive,
.navigationbar-element-next-inactive,
.navigationbar-element-previous-inactive,
.navigationbar-element-last-inactive {
    background-color: #80BBC8;
    color: #C0C0C0;
}

.navigationbar-element-mouse-click,
.navigationbar-element-current-mouse-click,
.navigationbar-element-first-mouse-click,
.navigationbar-element-next-mouse-click,
.navigationbar-element-previous-mouse-click,
.navigationbar-element-last-mouse-click {
    background-color: #0A7058;
    color: white;
}

.navigationbar-wrapper .disabled {
    color: #C0C0C0;
}

.navigationbar-wrapper .bookmark {
    color: red;
}</css><view>&lt;div class=&quot;navigationbar-wrapper&quot;&gt;
    &lt;a title=&quot;First page&quot; href=&quot;#&quot;&gt;
        &lt;span class=&quot;navigationbar-element-first&quot;&gt;&lt;&lt;&lt;/span&gt;
    &lt;/a&gt;
    &lt;a title=&quot;Last page&quot; href=&quot;#&quot;&gt;
        &lt;span class=&quot;navigationbar-element-last&quot;&gt;&gt;&gt;&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;</view><preview>&lt;div class=&quot;navigationbar-wrapper&quot;&gt;
    &lt;a title=&quot;First page&quot; href=&quot;#&quot;&gt;
        &lt;span class=&quot;navigationbar-element-first&quot;&gt;&lt;&lt;&lt;/span&gt;
    &lt;/a&gt;
    &lt;a title=&quot;Last page&quot; href=&quot;#&quot;&gt;
        &lt;span class=&quot;navigationbar-element-last&quot;&gt;&gt;&gt;&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;</preview><presenter>function Addonpage_navigation_bar_anchor_create() {
    var presenter = function () { };
    presenter.eventBus = null;
    presenter.pagesOk = [];
    presenter.allPagesDisplayed = false;
    presenter.pageTitles = [];
    presenter.originalIndex = 0;
    presenter.isAnimateScroll = false;
    presenter.timeoutScrollID = 0;

    var isWCAGOn = false;

    presenter.state = {
        bookmarks: []
    };

    presenter.__internalElements = {
        goToPage: goToPage
    };

    var NAVIGATION_PAGE = {
        FIRST: 0,
        LAST: 1,
        PREVIOUS: 2,
        NEXT: 3,
        OTHER: 4
    };

    presenter.ERROR_CODES = {
        &apos;P_01&apos;: &quot;Cannot load module - HTML element doesn&apos;t exists&quot;
    };

    function returnErrorObject(errorCode) {
        return { isError: true, errorCode: errorCode };
    }

    var movedFromIndex,
        maxElementCount;

    function getLanguage(model) {
    	return Internationalization.WESTERN_ARABIC;
    }

    function getTextVoiceObject (text, lang) { return {text: text, lang: lang}; }

    presenter.getTextToSpeechOrNull = function (playerController) {
        if (playerController) {
            return playerController.getModule(&apos;Text_To_Speech1&apos;);
        }

        return null;
    };

    function speak (data) {
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);

        if (tts &amp;&amp; isWCAGOn) {
            tts.speak(data);
        }
    }

    presenter.setWCAGStatus = function (isOn) {
        isWCAGOn = isOn;
    };

    presenter.keyboardController = function(keycode, isShift, event) {
        event.preventDefault();

        var elements = presenter.$view.find(&quot;span&quot;).not(&quot;[class*=&apos;inactive&apos;]&quot;);

        function getCurrentPosition() {
            var pos;
            $.each(elements, function(i, el) {
                if ($(el).is(&quot;[class*=&apos;mouse-hover&apos;]&quot;)) {
                    pos = i;
                    return false;
                }
            });

            if (typeof pos === &quot;undefined&quot;) {
                $.each(elements, function(i, el) {
                    if ($(el).is(&quot;[class*=&apos;current&apos;]&quot;)) {
                        pos = i;
                        return false;
                    }
                });
            }

            return pos;
        }

        function select(element) {
            if (!element) return;

            deselect();

            $(element).removeClass(&apos;navigationbar-element&apos;);
            $(element).addClass(&apos;navigationbar-element-mouse-hover&apos;);

            var pageNumber = $(element).attr(&apos;data-page-number&apos;);
        }

        function skipToPage() {
            $(elements[getCurrentPosition()]).trigger(&apos;click&apos;);
        }

        function back() {
            select(elements[getCurrentPosition() - 1]);
            presenter.playButton(elements[getCurrentPosition()]);
        }

        function forward() {
            select(elements[getCurrentPosition() + 1]);
            presenter.playButton(elements[getCurrentPosition()]);
        }

        function deselect() {
            var activeElement = presenter.$view.find(&apos;span.navigationbar-element-mouse-hover&apos;);
            activeElement.removeClass(&apos;navigationbar-element-mouse-hover&apos;);
            activeElement.addClass(&apos;navigationbar-element&apos;);
        }

        switch(keycode) {
            case 13: // enter
                if(isShift) { // isShift is true when ctrl or shift is pressed
                    deselect();
                } else {
                    presenter.playButton(elements[getCurrentPosition()]);
                }
                break;
            case 32: // space
                skipToPage();
                break;
            case 37: // left arrow
                back();
                break;
            case 39: // right arrow
                forward();
                break;
            case 27: // escape
                deselect();
                break;
            case 9: // tab
                if(isShift) {
                    back();
                } else {
                    forward();
                };
                break;
        }
    };

    presenter.onScrollWindowEvent = function(e) {
        var scrollTop = $(this).scrollTop(); //e.target
        var header = $(&apos;.ic_header&apos;).height();
        presenter.onScrollEvent({value: scrollTop + header});
    }

    presenter.setPlayerController = function (controller) {
        presenter.playerController = controller;
        presenter.eventBus = controller.getEventBus();
        presenter.presentation = controller.getPresentation();
        presenter.commander = controller.getCommands();
        //TODO: Contar p√°ginas en el &quot;PageLoaded&quot; envent
        presenter.pageCount = 1;//controller.getPresentation().getPageCount();
        presenter.currentIndex = 0; //controller.getCurrentPageIndex();
        presenter.scoreService = controller.getScore();
        presenter.eventBus.addEventListener(&apos;PageLoaded&apos;, this);
        presenter.eventBus.addEventListener(&apos;ValueChanged&apos;, this);
        presenter.eventBus.addEventListener(&apos;ShowAnswers&apos;, this);
        presenter.eventBus.addEventListener(&apos;HideAnswers&apos;, this);
        presenter.eventBus.addEventListener(&apos;closePage&apos;, this);
        // TODO: Inicializa resize/scroll events
        presenter.eventBus.addEventListener(&apos;ResizeWindow&apos;, this);
        presenter.eventBus.addEventListener(&apos;ScrollEvent&apos;, this);

        presenter.originalIndex = 0;
    };

    presenter.playButton = function(element){
        var $element = $(element);
        if($element.hasClass(&apos;navigationbar-element-previous&apos;)) {
            presenter.playPage(presenter.currentIndex - 1 , presenter.configuration.speechTexts.prevPage);
        } else if ($element.hasClass(&apos;navigationbar-element-next&apos;)){
            presenter.playPage(presenter.currentIndex + 1 , presenter.configuration.speechTexts.nextPage);
        } else {
            var pageNumber = $element.attr(&apos;data-page-number&apos;);
            if (pageNumber !== null &amp;&amp; pageNumber !== undefined &amp;&amp; !isNaN(pageNumber)){
                if ($element.hasClass(&apos;disabled&apos;)) {
                   presenter.playPage(pageNumber - 1, presenter.configuration.speechTexts.disabledPage + &apos; &apos; + pageNumber);
                } else {
                    presenter.playPage(pageNumber - 1, presenter.configuration.speechTexts.goToPageNumber + &apos; &apos; + pageNumber);
                }
            }
        }
    };

    presenter.playPage = function (index, text) {
        if (index &gt;= 0 &amp;&amp; index &lt; presenter.pageTitles.length) {
            var textVoiceArray = [];
            if(presenter.configuration.playTitle) {
                textVoiceArray.push(getTextVoiceObject(text + &apos; &apos; + presenter.configuration.speechTexts.titled));
                textVoiceArray.push(getTextVoiceObject(presenter.pageTitles[index], presenter.configuration.langTag));
            } else {
                textVoiceArray.push(getTextVoiceObject(text));
            }
            speak(textVoiceArray);
        } else {
            speak(getTextVoiceObject(text));
        }
    };

    function goToPage(whereTo, index) {
        if (presenter.isAnimateScroll) {
            return;
        }
        var currentIndex = 0;
        if (movedFromIndex) {
            currentIndex = movedFromIndex;
        } else {
            currentIndex = presenter.currentIndex;
        }
        var goToIndex = 0;
        switch (whereTo) {
            case NAVIGATION_PAGE.FIRST:
                if (currentIndex !== 0) {
                    goToIndex = 0;
                }
                break;
            case NAVIGATION_PAGE.LAST:
                if (currentIndex !== (presenter.pageCount - 1)) {
                    goToIndex = presenter.pageCount - 1;
                }
                break;
            case NAVIGATION_PAGE.NEXT:
                if (currentIndex !== (presenter.pageCount - 1)) {
                    goToIndex = currentIndex + 1;
                }
                break;
            case NAVIGATION_PAGE.PREVIOUS:
                if (currentIndex !== 0) {
                    goToIndex = currentIndex - 1;
                }
                break;
            case NAVIGATION_PAGE.OTHER:
                if ((index &gt;= 0) &amp;&amp; (index &lt;= (presenter.pageCount - 1))) {
                    goToIndex = index;
                }
                break;
        }

        //TODO: Ir a la p√°gina Anchor
        //presenter.commander.gotoPageIndex(goToIndex);
        var top = presenter.pageAnchors[goToIndex].top;
        
        presenter.isAnimateScroll = true;
        
        var isStaticHeader = $(&quot;.ic_static_header&quot;).length &gt; 0;
        var headerHeight = 0;
        if (isStaticHeader) {
            headerHeight = $(&quot;.ic_static_header&quot;).css(&quot;height&quot;).replace(&quot;px&quot;, &quot;&quot;);
        }

        if (window.isFrameInDifferentDomain || window.isInIframe) {
            var scale = parent.fitToWindowScale || 1;
            top = (top - headerHeight) * scale;
            $(&apos;html, body, #content-view&apos;, window.parent.document).animate({scrollTop: top + window.iframeSize.notScaledOffset}, &apos;slow&apos;, &apos;swing&apos;, function(){
                presenter.isAnimateScroll = false;
            });
        } else {
            top = top - headerHeight;
            var scale = presenter.playerController.getScaleInformation();
            top = top * scale.scaleY;

            $(&apos;html, body, #scrollableBody&apos;).animate({scrollTop: top}, &apos;slow&apos;, &apos;swing&apos;, function(){
                presenter.isAnimateScroll = false;
            });
        }
        presenter.currentIndex = goToIndex;
        presenter.originalIndex = goToIndex;
        movedFromIndex = goToIndex;
        handleScrollVisiblePages(presenter.isPreview);

    }

    function handleMouseActions() {
        handleArrowClickActions();
        handleIndexClickActions();
        handleHoverAndMouseDownActions();
    }

    function handleArrowClickActions() {
        presenter.$view.find(&apos;[class=&quot;navigationbar-element-first&quot;]&apos;).parent().click(function () {
            goToPage(NAVIGATION_PAGE.FIRST);
            return false;
        });

        presenter.$view.find(&apos;[class=&quot;navigationbar-element-previous&quot;]&apos;).parent().click(function () {
            goToPage(NAVIGATION_PAGE.PREVIOUS);
            return false;
        });

        presenter.$view.find(&apos;[class=&quot;navigationbar-element-next&quot;]&apos;).parent().click(function () {
            goToPage(NAVIGATION_PAGE.NEXT);
            return false;
        });

        presenter.$view.find(&apos;[class=&quot;navigationbar-element-last&quot;]&apos;).parent().click(function () {
            goToPage(NAVIGATION_PAGE.LAST);
            return false;
        });
    }

    function handleIndexClickActions() {
        presenter.$view.find(&apos;[class*=&quot;navigationbar-indexed-element&quot;]&apos;).each(function () {
            var pageIndex = parseInt($(this).attr(&quot;data-page-number&quot;), 10) - 1;

            $(this).parent().click(function (event) {
                event.stopPropagation();
                event.preventDefault();

                goToPage(NAVIGATION_PAGE.OTHER, pageIndex);
            });
        });

    }

    presenter.checkIfPagesOk = function () {
        presenter.$view.find(&quot;.navigationbar-indexed-element&quot;).each(function () {
            if($(this).hasClass(&apos;navigationbar-page-ok&apos;)){
                var pageIndex = parseInt($(this).attr(&quot;data-page-number&quot;), 10);
                presenter.pagesOk.push(pageIndex);
            }
        });
    };

    presenter.addClassPageOK = function () {
        for (var i=0; i &lt; presenter.pagesOk.length; i++){
            presenter.$wrapper.find(&quot;[data-page-number=&apos;&quot; + presenter.pagesOk[i] + &quot;&apos;]&quot;).addClass(&apos;navigationbar-page-ok&apos;);
        }
    };

    //TODO: Cambiar por las p√°ginas visibles en el scroll
    function handleScrollVisiblePages(preview) {
        if (movedFromIndex == undefined) {
            movedFromIndex = presenter.currentIndex;
        }
        generateElements(true, preview, false);

        presenter.addClassPageOK();

        presenter.isPageOK();

        presenter.refreshBookmarks();
    }

    function handleHoverAndMouseDownActions() {
        var isHomeInactive = presenter.currentIndex === 0;
        var isReportInactive = presenter.currentIndex === presenter.pageCount - 1;

        handleSpecificElementHoverAndMouseDown(&apos;navigationbar-element-first&apos;, isHomeInactive);
        handleSpecificElementHoverAndMouseDown(&apos;navigationbar-element-previous&apos;, isHomeInactive);
        handleSpecificElementHoverAndMouseDown(&apos;navigationbar-element-next&apos;, isReportInactive);
        handleSpecificElementHoverAndMouseDown(&apos;navigationbar-element-last&apos;, isReportInactive);
        handleSpecificElementHoverAndMouseDown(&apos;navigationbar-element-current&apos;, false);

        handleElementHoverAndMouseDown();
    }

    function handleSpecificElementHoverAndMouseDown(selector, inactive) {
        var removeClassNames = selector + &apos; &apos; + selector + &apos;-mouse-hover&apos; +
            &apos; &apos; + selector + &apos;-mouse-click&apos; + &apos; &apos; + selector + &apos;-inactive&apos;;

        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );

        presenter.$wrapper.find(&quot;span[class^=&quot; + selector + &quot;]&quot;).each(function() {
            var addClassName = inactive ? selector + &apos;-inactive&apos; : selector;

            if (!iOS) {
            	$(this).hover(
            		function() {
                    	$(this).removeClass(removeClassNames);
                    	$(this).addClass(selector + &apos;-mouse-hover&apos;);
                	},
                	function() {
                    	$(this).removeClass(removeClassNames);
                    	$(this).addClass(addClassName);
                	}
            	);
            }

            $(this).mousedown(
                function() {
                    $(this).removeClass(removeClassNames);
                    $(this).addClass(selector + &apos;-mouse-click&apos;);
                }
            );

            $(this).mouseup(
                function() {
                    $(this).removeClass(removeClassNames);
                    $(this).addClass(addClassName);
                }
            );
        });
    }

    function handleElementHoverAndMouseDown() {
        var notSelectorsList = &apos;.navigationbar-element-first,.navigationbar-element-last,&apos; +
            &apos;.navigationbar-element-next,.navigationbar-element-previous,.navigationbar-element-current&apos;;

        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );

        presenter.$wrapper.find(&apos;.navigationbar-element&apos;).not(notSelectorsList).each(function() {
            if (!iOS) {
            	$(this).hover(
            		function() {
                    	$(this).removeClass(&apos;navigationbar-element&apos;);
                    	$(this).addClass(&apos;navigationbar-element-mouse-hover&apos;);
                	},
                	function() {
                    	$(this).removeClass(&apos;navigationbar-element-mouse-hover&apos;);
                    	$(this).addClass(&apos;navigationbar-element&apos;);
                	}
            	);
            }

            $(this).mousedown(
                function() {
                    $(this).removeClass(&apos;navigationbar-element&apos;);
                    $(this).addClass(&apos;navigationbar-element-mouse-click&apos;);
                }
            );

            $(this).mouseup(
                function() {
                    $(this).removeClass(&apos;navigationbar-element-mouse-click&apos;);
                    $(this).addClass(&apos;navigationbar-element&apos;);
                }
            );
        });
    }

    function removeAllElements() {
        presenter.$view.find(&quot;span[class*=navigationbar-element]&quot;).parent().remove();
    }

    function generateHomeArrowElement() {
        var isElementInactive = presenter.currentIndex === 0;
        var elementStyle = isElementInactive ? &quot;navigationbar-element-first-inactive&quot; : &quot;navigationbar-element-first&quot;;

        if (presenter.$view.has(&apos;[class*=&quot;navigationbar-element-first&quot;]&apos;).length &lt; 1) {
            var homeElementArrow = &apos;&lt;a href=&quot;#&quot;&gt;&apos; +
                &apos;&lt;span class=&quot;&apos; + elementStyle + &apos;&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&apos; +
                &apos;&lt;/a&gt;&apos;;

            presenter.$wrapper.append(homeElementArrow);
        }
    }

    function generatePreviousArrowElement() {
        var homeElement = presenter.$view.find(&apos;[class*=&quot;navigationbar-element-first&quot;]:first&apos;).parent();
        var isElementInactive = presenter.currentIndex === 0;
        var elementStyle = isElementInactive ? &quot;navigationbar-element-previous-inactive inactive&quot; : &quot;navigationbar-element-previous&quot;;

        var previousElementArrow = &apos;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;&apos; + elementStyle + &apos;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/a&gt;&apos;;

        //TODO: solo si hay m√°s de 4 p√°ginas
        if (presenter.pageCount &lt;= 4) {
            presenter.$wrapper.append(previousElementArrow);
        } else {
            homeElement.after(previousElementArrow);
        }

    }

    function generateNextArrowElement() {
        var previousElement = presenter.$view.find(&apos;[class*=&quot;navigationbar-element-previous&quot;]:first&apos;).parent();
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;
        var elementStyle = isElementInactive ? &quot;navigationbar-element-next-inactive inactive&quot; : &quot;navigationbar-element-next&quot;;

        var nextElementArrow = &apos;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;&apos; + elementStyle + &apos;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&apos;;

        presenter.$wrapper.append(nextElementArrow);
    }

    function generateReportArrowElement() {
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;
        var elementStyle = isElementInactive ? &quot;navigationbar-element-last-inactive&quot; : &quot;navigationbar-element-last&quot;;

        if (presenter.$view.has(&apos;[class*=&quot;navigationbar-element-last&quot;]&apos;).length &lt; 1) {
            var reportElementArrow = &apos;&lt;a href=&quot;#&quot;&gt;&lt;span class=&quot;&apos; + elementStyle + &apos;&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;&apos;;

            presenter.$wrapper.append(reportElementArrow);
        }
    }

    function generateHomeAndPreviousArrowsElements() {
        generateHomeArrowElement();
        generatePreviousArrowElement();
    }

    function generateReportAndNextArrowsElements() {
        generateNextArrowElement();
        generateReportArrowElement();
    }

    // Index is displayed page number
    function generateIndexElementStub(index, navigationBarMoved) {
        var isCurrentElement, pageIndex;

        isCurrentElement = !navigationBarMoved ? (index - 1) === presenter.currentIndex : (index - 1) === movedFromIndex;
        pageIndex = parseInt(index, 10);

        var currentElementStyle = isCurrentElement ? &quot;navigationbar-element-current&quot; : &quot;navigationbar-element&quot;;
        var elementId = &apos;&apos;;
        if (isCurrentElement) {
            var addonID = presenter.configuration.ID;
            elementId = &apos;id=&quot;current-page-number&apos; + (addonID ? &apos;-&apos; + addonID : &apos;&apos;) + &apos;&quot; &apos;;
        }

        return &apos;&lt;a href=&quot;#&quot;&gt;&apos; +
            &apos;&lt;span &apos; + elementId + &apos;class=&quot;&apos; + currentElementStyle + &apos; navigationbar-indexed-element&apos; +&apos;&quot; data-page-number=&quot;&apos; + pageIndex + &apos;&quot;&gt;&apos; + Internationalization.translate(index, presenter.configuration.language) + &apos;&lt;/span&gt;&apos; +
            &apos;&lt;/a&gt;&apos;;
    }

    function generateIndexedElements(navigationBarMoved, triggerOnRun) {

        var element; // Works as temporary indexed element

        var n = 0;

        var pageCount = presenter.pageCount;

        if (maxElementCount &gt;= pageCount) { // All pages will be displayed
            for (n = 1; n &lt;= pageCount; n++) {
                element = generateIndexElementStub(n, navigationBarMoved);
                presenter.$wrapper.append(element);
            }
            presenter.allPagesDisplayed = true;
        } else {
            // TODO: Indice de elementos cuando hay m√°s p√°ginas que slots
            var numberOfElement = maxElementCount;

            var endIndex = Math.min(presenter.pageCount, presenter.currentIndex + (maxElementCount / 2));
            var startIndex = Math.max(0, endIndex - maxElementCount);

            for (n = 0; n &lt; numberOfElement; n++) {
                var indexedElement = generateIndexElementStub(startIndex + 1 + n, navigationBarMoved);
                presenter.$wrapper.append(indexedElement);
            }

        }
    }

    function generateElements(navigationBarMoved, preview, triggerOnRun) {
        var elementWidth = presenter.elementWidth;
        var elementHeight = presenter.elementHeight;
        var horizontalGap = presenter.horizontalGap;

        removeAllElements();

        generateHomeAndPreviousArrowsElements();

        generateIndexedElements(navigationBarMoved, triggerOnRun);

        generateReportAndNextArrowsElements();

        if (!preview) {
            handleMouseActions();
        }

        if (presenter.$wrapper.css(&apos;direction&apos;) === &apos;rtl&apos;) {
            reorderElements(preview);
        }

        presenter.$view.find(&quot;span[class^=navigationbar-element]&quot;).each(function () {
            var width = $(this).hasClass(&apos;navigationbar-element-last&apos;) ? elementWidth + horizontalGap : elementWidth;
            $(this).width(width + &apos;px&apos;);
            $(this).height(elementHeight + &apos;px&apos;);
            $(this).css(&apos;line-height&apos;, elementHeight + &apos;px&apos;);
        });
    }

    function reorderElements(preview) {
        var elements = [];

        presenter.$wrapper.children(&apos;a&apos;).each(function () {
            elements.push($(this));
            $(this).remove();
        });

        for (var i = elements.length - 1; i &gt;= 0; i--) {
            presenter.$wrapper.append(elements[i]);
        }

        if (!preview) {
            handleMouseActions();
        }

    }

    presenter.arePagesNamesCorrect = function (pageNames, length) {
        for (var i = 0; i &lt; pageNames.length; i++) {
            if (length &gt; 1 &amp;&amp; pageNames[i] == &quot;&quot;) {
                return false;
            }
            if (isNaN(pageNames[i])) {
                switch (pageNames[i]) {
                    case &quot;previous&quot;:
                        break;
                    case &quot;first&quot;:
                        break;
                    case &quot;last&quot;:
                        break;
                    case &quot;next&quot;:
                        break;
                    default:
                        return false;
                }
            } else {
                if(length&gt;1) {
                    if (pageNames[i] % 1 !== 0 || pageNames[i] &lt;= 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    };

    presenter.upgradeModel = function (model) {
        return model;
    };

    presenter.validateModel = function (model) {
        var validatedModel = {
            isError: false,
            language: getLanguage(model),
            ID: model.ID,
            speechTexts: getSpeechTexts(model),
            playTitle: 0 === model[&apos;playTitle&apos;].toLowerCase().localeCompare(&apos;true&apos;),
        };

        return validatedModel;
    };

    function getSpeechTextProperty (rawValue, defaultValue) {
        var value = rawValue.trim();

        if (value === undefined || value === null || value === &apos;&apos;) {
            return defaultValue;
        }

        return value;
    }

    function getSpeechTexts (model) {
        var speechTextsModel = {
            goToPageNumber:  &apos;Go to page number&apos;,
            nextPage: &apos;Go to next page&apos;,
            prevPage: &apos;Go to previous page&apos;,
            titled: &apos;Titled&apos;,
            disabledPage: &apos;Disabled page&apos;
        };

        speechTextsModel = {
            goToPageNumber:    getSpeechTextProperty(model[&apos;speechTextsGoToPageNumber&apos;], speechTextsModel.goToPageNumber),
            nextPage: getSpeechTextProperty(model[&apos;speechTextsNextPage&apos;], speechTextsModel.nextPage),
            prevPage:  getSpeechTextProperty(model[&apos;speechTextsPrevPage&apos;], speechTextsModel.prevPage),
            titled:     getSpeechTextProperty(model[&apos;speechTextsTitled&apos;], speechTextsModel.titled),
            disabledPage:      getSpeechTextProperty(model[&apos;speechTextsDisabledPage&apos;], speechTextsModel.disabledPage),
        };
        return speechTextsModel;
    }

    presenter.getArrowsCount = function () {
        var arrowsCount = 0;
        //HomeLastArrows
        // TODO: Solo si hay m√°s de solo si hay m√°s de 4 p√°ginas
        if (presenter.pageCount &gt; 4) {
            arrowsCount += 2;
        }
        
        //NextPrevArrows
        arrowsCount += 2;

        return arrowsCount;
    };

    presenter.addAdditionalStyleToPage = function (page, styleName, styleValue, clazz) {
        if (isNaN(page)) {
            presenter.$wrapper.find(&quot;span[class^=&apos;navigationbar-element-&quot;+ page +&quot;&apos;]&quot;).css(styleName, styleValue);
            presenter.$wrapper.find(&quot;span[class^=&apos;navigationbar-element-&quot;+ page +&quot;&apos;]&quot;).addClass(clazz);

        } else {
            presenter.$wrapper.find(&quot;[data-page-number=&apos;&quot; + page + &quot;&apos;]&quot;).addClass(clazz);
            presenter.$wrapper.find(&quot;[data-page-number=&apos;&quot; + page + &quot;&apos;]&quot;).css(styleName, styleValue);
        }
    };

    function presenterLogic(view, model, isPreview) {
        presenter.isPreview = isPreview;
    	presenter.$view = $(view);
        presenter.$page = $(&apos;.ic_page&apos;);
        presenter.$wrapper = presenter.$view.find(&apos;.navigationbar-wrapper:first&apos;);
        var $element = presenter.$view.find(&apos;.navigationbar-element-first&apos;);

        model = presenter.upgradeModel(model);
        presenter.configuration = presenter.validateModel(model);
        var arrowsCount = presenter.getArrowsCount();

        if(presenter.configuration.isError){
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);
            return;
        }

        if (isPreview) {
            presenter.currentIndex = 0;
            presenter.pageCount = 21;
        }

        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$wrapper);
        var elementDimensions = DOMOperationsUtils.getOuterDimensions($element),
            elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);

        // TODO: Max 4 pages 
        //var elementBaseWidth = parseInt($element.width(), 10) + elementDistances.horizontal;
        maxElementCount = 4;//parseInt((presenter.$wrapper.width() - (arrowsCount * elementBaseWidth)) / elementBaseWidth, 10) - 4;
        var pageCount = presenter.pageCount;
        var numberOfElements = pageCount &lt; maxElementCount ? pageCount + arrowsCount : maxElementCount + arrowsCount;
        presenter.elementWidth = parseInt(presenter.$wrapper.width() / numberOfElements  - elementDistances.horizontal, 10);
        presenter.elementHeight = parseInt(presenter.$wrapper.height() - elementDistances.vertical, 10);
        presenter.horizontalGap = presenter.$wrapper.width() - (presenter.elementWidth + elementDistances.horizontal) * numberOfElements;

        removeAllElements();

        generateElements(false, isPreview, true);

        if (!isPreview) {
            window.addEventListener(&apos;resize&apos;, presenter.onResizeWindow);
            $(&quot;.ic_page&quot;).parents().on(&apos;scroll&apos;, presenter.onScrollWindowEvent);
            $(window).on(&apos;scroll&apos;, presenter.onScrollWindowEvent);
        }
    }

    presenter.onDestroy = function() {
        window.removeEventListener(&apos;resize&apos;, presenter.onResizeWindow);
        $(&quot;.ic_page&quot;).parents().off(&apos;scroll&apos;, presenter.onScrollWindowEvent);
    }

    presenter.setShowErrorsMode = function(){
        presenter.isCurrentPageOk();
    };

    presenter.reset = function () {
        presenter.isCurrentPageOk();
    };

    presenter.getPercentageScore = function (pageIndex) {
        var id = presenter.presentation.getPage(pageIndex).getId();
        var pageScore = presenter.scoreService.getPageScoreById(id);

        return (pageScore.score/pageScore.maxScore) * 100;
    };

    presenter.isCurrentPageOk = function () {
        //NOOP
    };

    presenter.isPageOK = function () {
        //NOOP
    };

    presenter.createPreview = function(view, model) {
        presenterLogic(view, model, true);
    };

    presenter.run = function (view, model) {
        presenter.pageLoadedDeferred = new $.Deferred();
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();

        presenterLogic(view, model, false);

        presenter.pageLoaded.then(function() {
            presenter.isPageOK();
        });
    };
    
    presenter.onEventReceived = function(eventName, eventData) {
        if (eventName == &apos;PageLoaded&apos;) {
            presenter.currentIndex = 0;
            presenter.pageIndex = presenter.currentIndex;

            //TODO: Contar las p√°ginas Anchor
            presenter.pageAnchors = [];
            presenter.$page.find(&apos;.navigation-page-anchor&apos;).each(function( i ) {
                var pageTop = $( this ).offset().top;
                var pageHeight = $( this ).height();
                presenter.pageAnchors.push({ top : pageTop, height: pageHeight });
                var pageid = $( this ).parent().attr(&quot;id&quot;);
                var pageModule = presenter.playerController.getModule(pageid);

                if (pageModule) {
                    presenter.pageTitles.push(pageModule.getName());
                } else {
                    presenter.pageTitles.push(&apos;&apos;);
                }
            });
            presenter.pageAnchors.sort(function(a, b) {
                return a.top - b.top;
            });

            if (presenter.pageAnchors.length == 0) {
                var pageHeight = $( &apos;.ic_page&apos; ).height();
                presenter.pageAnchors.push({top: 0, height: pageHeight});
            }

            presenter.pageCount = presenter.pageAnchors.length;

            presenter.pageLoadedDeferred.resolve();

            console.log(&quot;Addonpage_navigation_bar_anchor_create&quot;);
            handleScrollVisiblePages(presenter.isPreview);
        }
        if(eventData.value == &quot;resetClicked&quot;){
            presenter.currentIndex = presenter.pageIndex;
            presenter.isCurrentPageOk();
        }

        if (eventName == &quot;ShowAnswers&quot;) {
            presenter.showAnswers();
        }

        if (eventName == &quot;HideAnswers&quot;) {
            presenter.hideAnswers();
        }

        //TODO: Resize y Scroll envets
        if (eventName == &quot;ResizeWindow&quot;) {
            presenter.onResizeWindow();
        }

        if (eventName == &quot;ScrollEvent&quot;) {
            presenter.onScrollEvent(eventData);
        }
        
    };

    presenter.onResizeWindow = function () {
        //NOOP
    }

    presenter.onScrollEvent = function (event) {
        if (presenter.pageAnchors &amp;&amp; !presenter.isAnimateScroll) {
            var scroll = 0;
            if (window.isFrameInDifferentDomain || window.isInIframe) {
                scroll = Math.max(0, window.iframeSize.offsetTop);//presenter.playerController.iframeScroll();
            } else {
                scroll = event.value;
                var scale = presenter.playerController.getScaleInformation();
                scroll = scroll / scale.scaleY;
            }
    
            for (var i = 0; i &lt; presenter.pageAnchors.length; i++) {
                var threshold = presenter.pageAnchors[i].height / 2;
                if ((presenter.pageAnchors[i].top + threshold) &gt;= scroll) {
                    if (presenter.currentIndex != i) {
                        presenter.currentIndex = i;
                        presenter.originalIndex = i;
                        movedFromIndex = i;
                        handleScrollVisiblePages(presenter.isPreview);
                    }
                    break;
                }
            }
        }

    }

    presenter.showAnswers = function () {
        presenter.isShowAnswersActive = true;
    };

    presenter.hideAnswers = function () {
        presenter.isShowAnswersActive = false;
    };

    presenter.getState = function(){
        return JSON.stringify(presenter.state);
    };

    presenter.setState = function(state){
        if (state === null || state === &quot;&quot; || state === undefined) {
            return;
        }
        var parsedState = JSON.parse(state);
        if (parsedState.bookmarks != null) {
            presenter.state.bookmarks = parsedState.bookmarks;
        }
        presenter.refreshBookmarks();
    };

    presenter.executeCommand = function (name, params) {
        var commands = {
            &apos;bookmarkCurrentPage&apos;: presenter.bookmarkCurrentPage,
            &apos;removeBookmark&apos; : presenter.removeBookmark,
            &apos;removeAllBookmarks&apos; : presenter.removeallBookmarks
        };

        return Commands.dispatch(commands, name, params, presenter);
    };

    presenter.bookmarkCurrentPage = function() {
        var page = presenter.originalIndex + 1;
        if ( presenter.state.bookmarks.indexOf(page) == -1) {
            presenter.state.bookmarks.push(page);
        }
        presenter.refreshBookmarks();
    };

    presenter.removeBookmark = function() {
        var page = presenter.originalIndex + 1;
        var index = presenter.state.bookmarks.indexOf(page);
        if ( index != -1) {
            presenter.state.bookmarks.splice(index, 1);
        }
        presenter.refreshBookmarks();
    };

    presenter.removeAllBookmarks = function() {
        presenter.state.bookmarks = [];
        presenter.refreshBookmarks();
    };

    presenter.refreshBookmarks = function() {
        for (var i = 0; i &lt; presenter.pageCount; i++) {
            var page = i+1;
            if ( presenter.state.bookmarks.indexOf(page) != -1) {
                presenter.$wrapper.find(&quot;span[data-page-number=&apos;&quot; + page + &quot;&apos;]&quot;).addClass(&apos;bookmark&apos;);
            } else {
                presenter.$wrapper.find(&quot;span[data-page-number=&apos;&quot; + page + &quot;&apos;]&quot;).removeClass(&apos;bookmark&apos;);
            }

        }
    };

    return presenter;
}</presenter></addon>